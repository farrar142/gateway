# Generated by Django 3.2.9 on 2023-03-09 05:19

import apigateway.nodes
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('identifier', models.CharField(default='', max_length=256)),
                ('apikey', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Upstream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(max_length=255)),
                ('scheme', models.CharField(choices=[('http', 'Http'), ('https', 'Https'), ('http+unix', 'Unitx')], default='http', max_length=64)),
                ('weight', models.PositiveIntegerField(default=100)),
                ('load_balance', models.CharField(choices=[('round_robin', 'Round Robin'), ('weight_robin', 'Weight Robin')], default='round_robin', max_length=64)),
                ('retries', models.PositiveIntegerField(default=0)),
                ('timeout', models.PositiveIntegerField(default=10)),
                ('alias', models.CharField(default='', max_length=64, unique=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(apigateway.nodes.ServerConnectionRecord, models.Model),
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(max_length=255)),
                ('scheme', models.CharField(choices=[('http', 'Http'), ('https', 'Https'), ('http+unix', 'Unitx')], default='http', max_length=64)),
                ('weight', models.PositiveIntegerField(default=100)),
                ('enabled', models.BooleanField(default=True, verbose_name='활성화')),
                ('upstream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='apigateway.upstream')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Api',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plugin', models.IntegerField(choices=[(0, 'No Auth'), (1, 'Basic Auth'), (2, 'Key Auth'), (3, 'Admin Only')], default=0)),
                ('name', models.CharField(max_length=128)),
                ('request_path', models.CharField(max_length=255)),
                ('wrapped_path', models.CharField(max_length=255)),
                ('consumers', models.ManyToManyField(blank=True, to='apigateway.Consumer')),
                ('upstream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_set', to='apigateway.upstream')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=150)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
